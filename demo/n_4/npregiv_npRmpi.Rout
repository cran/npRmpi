
R version 2.15.3 (2013-03-01) -- "Security Blanket"
Copyright (C) 2013 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-apple-darwin12.2.1/x86_64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

Loading required package: boot
Loading required package: cubature
Nonparametric Kernel Methods for Mixed Datatypes (version 0.50-1) + Rmpi 0.6-2
[vignette("np_faq",package="npRmpi") provides answers to frequently asked questions]
master (rank 0, comm 1) of size 4 is running on: pc-racine1 
slave1 (rank 1, comm 1) of size 4 is running on: pc-racine1 
slave2 (rank 2, comm 1) of size 4 is running on: pc-racine1 
slave3 (rank 3, comm 1) of size 4 is running on: pc-racine1 
> ## Make sure you have the .Rprofile file from npRmpi/inst/ in your
> ## current directory or home directory. It is necessary.
> 
> ## To run this on systems with OPENMPI installed and working, try
> ## mpirun -np 2 R CMD BATCH npregiv_npRmpi. Check the time in the
> ## output file foo.Rout (the name of this file with extension .Rout),
> ## then try with, say, 4 processors and compare run time.
> 
> ## Initialize master and slaves.
> 
> mpi.bcast.cmd(np.mpi.initialize(),
+               caller.execute=TRUE)
> 
> ## Turn off progress i/o as this clutters the output file (if you want
> ## to see search progress you can comment out this command)
> 
> mpi.bcast.cmd(options(np.messages=FALSE),
+               caller.execute=TRUE)
> 
> ## Generate some data and broadcast it to all slaves (it will be known
> ## to the master node)
> 
> mpi.bcast.cmd(set.seed(42),
+               caller.execute=TRUE)
> 
> ## Generate some data
> 
> n <- 500
> 
> ## The DGP is as follows:
> 
> ## 1) y = phi(z) + u
> 
> ## 2) E(u|z) != 0 (endogeneity present)
> 
> ## 3) Suppose there exists an instrument w such that z = f(w) + v and
> ## E(u|w) = 0
> 
> ## 4) We generate v, w, and generate u such that u and z are
> ## correlated. To achieve this we express u as a function of v (i.e. u =
> ## gamma v + eps)
> 
> v <- rnorm(n,mean=0,sd=0.27)
> eps <- rnorm(n,mean=0,sd=0.05)
> u <- -0.5*v + eps
> w <- rnorm(n,mean=0,sd=1)
> 
> ## In Darolles et al (2011) there exist two DGPs. The first is
> ## phi(z)=z^2 and the second is phi(z)=exp(-abs(z)) (which is
> ## discontinuous and has a kink at zero).
> 
> fun1 <- function(z) { z^2 }
> fun2 <- function(z) { exp(-abs(z)) }
> 
> z <- 0.2*w + v
> 
> ## Generate two y vectors for each function.
> 
> y1 <- fun1(z) + u
> y2 <- fun2(z) + u
> 
> ## You set y to be either y1 or y2 (ditto for phi) depending on which
> ## DGP you are considering:
> 
> y <- y1
> phi <- fun1
> 
> ## Sort on z (for plotting)
> 
> ivdata <- data.frame(y,z,w)
> ivdata <- ivdata[order(ivdata$z),]
> rm(y,z,w)
> mpi.bcast.Robj2slave(ivdata)
> mpi.bcast.cmd(attach(ivdata),
+               caller.execute=TRUE)
> 
> t <- system.time(mpi.bcast.cmd(model.iv <- npregiv(y=y,z=z,w=w),
+                                caller.execute=TRUE))
> 
> cat("Elapsed time =", t[3], "\n")
Elapsed time = 252.182 
> 
> ## Clean up properly then quit()
> 
> mpi.bcast.cmd(mpi.quit(),
+               caller.execute=TRUE)
