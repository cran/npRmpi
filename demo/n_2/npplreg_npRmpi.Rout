
R version 2.11.0 (2010-04-22)
Copyright (C) 2010 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

Loading required package: boot
Loading required package: cubature
Nonparametric Kernel Methods for Mixed Datatypes (version 0.40-3) + Rmpi 0.5-9
master (rank 0, comm 1) of size 2 is running on: jeffrey-racines-macbook-pro 
slave1 (rank 1, comm 1) of size 2 is running on: jeffrey-racines-macbook-pro 
> ## Make sure you have the .Rprofile file from npRmpi/inst/ in your
> ## current directory or home directory. It is necessary.
> 
> ## To run this on systems with OPENMPI installed and working, try
> ## mpirun -np 2 R CMD BATCH npplreg_npRmpi. Check the time in the
> ## output file foo.Rout (the name of this file with extension .Rout),
> ## then try with, say, 4 processors and compare run time.
> 
> ## Initialize master and slaves.
> 
> mpi.bcast.cmd(np.mpi.initialize(),
+               caller.execute=TRUE)
> 
> ## Turn off progress i/o as this clutters the output file (if you want
> ## to see search progress you can comment out this command)
> 
> mpi.bcast.cmd(options(np.messages=FALSE),
+               caller.execute=TRUE)
> 
> ## Generate some data and broadcast it to all slaves (it will be known
> ## to the master node)
> 
> mpi.bcast.cmd(set.seed(42),
+               caller.execute=TRUE)
> 
> n <- 1000
> 
> x1 <- rnorm(n)
> x2 <- rbinom(n, 5, .3)
> 
> z1 <- rbinom(n, 2, .3)
> z2 <- rnorm(n)
> 
> y <- 1 + x1 + x2 + z1 + sin(z2) + rnorm(n)
> 
> x2 <- ordered(x2)
> z1 <- ordered(z1)
> 
> mpi.bcast.Robj2slave(x1)
> mpi.bcast.Robj2slave(x2)
> mpi.bcast.Robj2slave(z1)
> mpi.bcast.Robj2slave(z2)
> mpi.bcast.Robj2slave(y)
> 
> ## Partially linear model
> 
> t <- system.time(mpi.bcast.cmd(bw <- npplregbw(formula=y~x1+x2|z1+z2),
+                                caller.execute=TRUE))
> 
> summary(bw)

Partially Linear Model
Regression data (1000 observations,
2 linear parametric variable(s) 2 nonparametric variable(s):

Regression Type: Local-Constant
Bandwidth Selection Method: Least Squares Cross-Validation
Formula: y ~ x1 + x2 | z1 + z2
Bandwidth Type: Fixed

y on z:
Exp. Var. Name: z1 Bandwidth: 0.04443462   Lambda Max: 1       
Exp. Var. Name: z2 Bandwidth: 0.5420071  Scale Factor: 2.259953 

x1 on z:
Exp. Var. Name: z1 Bandwidth: 1         Lambda Max: 1       
Exp. Var. Name: z2 Bandwidth: 4096126 Scale Factor: 17079205 

x2 on z:
Exp. Var. Name: z1 Bandwidth: 0.8855852   Lambda Max: 1       
Exp. Var. Name: z2 Bandwidth: 9959072   Scale Factor: 41525343

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 1

Ordered Categorical Kernel Type: Wang and Van Ryzin
No. Ordered Categorical Explanatory Vars.: 1

> 
> t <- t + system.time(mpi.bcast.cmd(pl <- npplreg(bws=bw),
+                                    caller.execute=TRUE))
> 
> summary(pl)

Partially Linear Model
Regression data: 1000 training points, in 4 variable(s)
With 2 linear parametric regressor(s), 2 nonparametric regressor(s)

                    y(z)          
Bandwidth(s): 0.04443462 0.5420071

                   x(z)        
Bandwidth(s): 1.0000000 4096126
              0.8855852 9959072

                      x1        x2
Coefficient(s): 1.004608 0.9393095

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Residual standard error: 1.014616
R-squared: 0.7223108

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 1

Ordered Categorical Kernel Type: Wang and Van Ryzin
No. Ordered Categorical Explanatory Vars.: 1

> 
> cat("Elapsed time =", t[3], "\n")
Elapsed time = 47.498 
> 
> ## Clean up properly then quit()
> 
> mpi.bcast.cmd(mpi.quit(),
+               caller.execute=TRUE)
