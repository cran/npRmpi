
R version 2.11.0 (2010-04-22)
Copyright (C) 2010 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

Loading required package: boot
Loading required package: cubature
Nonparametric Kernel Methods for Mixed Datatypes (version 0.40-3) + Rmpi 0.5-9
master (rank 0, comm 1) of size 2 is running on: jeffrey-racines-macbook-pro 
slave1 (rank 1, comm 1) of size 2 is running on: jeffrey-racines-macbook-pro 
> ## Make sure you have the .Rprofile file from npRmpi/inst/ in your
> ## current directory or home directory. It is necessary.
> 
> ## To run this on systems with OPENMPI installed and working, try
> ## mpirun -np 2 R CMD BATCH npcdistccdf_npRmpi. Check the time in the
> ## output file foo.Rout (the name of this file with extension .Rout),
> ## then try with, say, 4 processors and compare run time.
> 
> ## Initialize master and slaves.
> 
> mpi.bcast.cmd(np.mpi.initialize(),
+               caller.execute=TRUE)
> 
> ## Turn off progress i/o as this clutters the output file (if you want
> ## to see search progress you can comment out this command)
> 
> mpi.bcast.cmd(options(np.messages=FALSE),
+               caller.execute=TRUE)
> 
> ## Load your data and broadcast it to all slave nodes
> 
> library(MASS)
> 
> mpi.bcast.cmd(set.seed(42),
+               caller.execute=TRUE)
> 
> n <- 100
> 
> rho <- 0.25
> mu <- c(0,0)
> Sigma <- matrix(c(1,rho,rho,1),2,2)
> data <- mvrnorm(n=n, mu, Sigma)
> mydat <- data.frame(x=data[,2],y=data[,1])
> 
> mpi.bcast.Robj2slave(mydat)
> 
> ## A simple example with experimental conditional cdf bandwidth
> ## selection (unsupported)
> 
> t <- system.time(mpi.bcast.cmd(bw <- npcdensbw(y~x,
+                                                bwmethod="cv.ccdf",
+                                                data=mydat),
+                                caller.execute=TRUE))
> 
> summary(bw)

Conditional density data (100 observations, 2 variable(s))
(1 dependent variable(s), and 1 explanatory variable(s))

Bandwidth Selection Method: Conditional Distribution Cross-Validation
Formula: y ~ x
Bandwidth Type: Fixed
Objective Function Value: 0.1619456 (achieved on multistart 2)

Exp. Var. Name: x Bandwidth: 0.7990081 Scale Factor: 1.760743 

Dep. Var. Name: y Bandwidth: 0.3518754 Scale Factor: 0.8798297

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 1
No. Continuous Dependent Vars.: 1

> 
> t <- t + system.time(mpi.bcast.cmd(model <- npcdens(bws=bw),
+                                    caller.execute=TRUE))
> 
> summary(model)

Conditional Density Data: 100 training points, in 2 variable(s)
(1 dependent variable(s), and 1 explanatory variable(s))

                                y
Dep. Var. Bandwidth(s): 0.3518754
                                x
Exp. Var. Bandwidth(s): 0.7990081

Bandwidth Type: Fixed
Log Likelihood: -127.9669

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 1
No. Continuous Dependent Vars.: 1

> 
> cat("Elapsed time =", t[3], "\n")
Elapsed time = 34.384 
> 
> ## Clean up properly then quit()
> 
> mpi.bcast.cmd(mpi.quit(),
+               caller.execute=TRUE)
