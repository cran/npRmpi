
R version 2.11.0 (2010-04-22)
Copyright (C) 2010 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

Loading required package: boot
Loading required package: cubature
Nonparametric Kernel Methods for Mixed Datatypes (version 0.40-3) + Rmpi 0.5-9
master (rank 0, comm 1) of size 2 is running on: jeffrey-racines-macbook-pro 
slave1 (rank 1, comm 1) of size 2 is running on: jeffrey-racines-macbook-pro 
> ## Make sure you have the .Rprofile file from npRmpi/inst/ in your
> ## current directory or home directory. It is necessary.
> 
> ## To run this on systems with OPENMPI installed and working, try
> ## mpirun -np 2 R CMD BATCH npindexks_npRmpi. Check the time in the
> ## output file foo.Rout (the name of this file with extension .Rout),
> ## then try with, say, 4 processors and compare run time.
> 
> ## Initialize master and slaves.
> 
> mpi.bcast.cmd(np.mpi.initialize(),
+               caller.execute=TRUE)
> 
> ## Turn off progress i/o as this clutters the output file (if you want
> ## to see search progress you can comment out this command)
> 
> mpi.bcast.cmd(options(np.messages=FALSE),
+               caller.execute=TRUE)
> 
> ## Generate some data and broadcast it to all slaves (it will be known
> ## to the master node so no need to broadcast it)
> 
> mpi.bcast.cmd(set.seed(42),
+               caller.execute=TRUE)
> 
> n <- 2500
> 
> x <- rchisq(n, df=3)
> x1 <- (ifelse(x < 6, x, 6) - 2.348)/1.511
> x <- rnorm(n)
> x2 <- ifelse(abs(x) < 2 , x, 2) / 0.8796
> y <- ifelse(x1 + x2 + rnorm(n) > 0, 1, 0)
> mydat <- data.frame(x1,x2,y)
> rm(x,x1,x2,y)
> 
> mpi.bcast.Robj2slave(mydat)
> 
> ## A single index model example (Klein & Spady, binary y)
> 
> t <- system.time(mpi.bcast.cmd(bw <- npindexbw(formula=y~x1+x2,
+                                                method="kleinspady",
+                                                data=mydat),
+                                caller.execute=TRUE))
> 
> summary(bw)

Single Index Model
Regression data (2500 observations, 2 variable(s)):

      x1       x2
Beta:  1 1.013558
Bandwidth:  0.2024523
Optimisation Method:  Nelder-Mead
Regression Type: Local-Constant
Bandwidth Selection Method: Klein and Spady
Formula: y ~ x1 + x2
Objective Function Value: 0.3415126 (achieved on multistart 2)

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 1

> 
> t <- t + system.time(mpi.bcast.cmd(model <- npindex(bws=bw, gradients=TRUE),
+                                    caller.execute=TRUE))
> 
> summary(model)

Single Index Model
Regression Data: 2500 training points, in 2 variable(s)

      x1       x2
Beta:  1 1.013558
Bandwidth: 0.2024523
Kernel Regression Estimator: Local-Constant

Confusion Matrix
      Predicted
Actual    0    1
     0  922  174
     1  214 1190

Overall Correct Classification Ratio:  0.8448
Correct Classification Ratio By Outcome:
        0         1 
0.8412409 0.8475783 

McFadden-Puig-Kerschner performance measure:  0.8326285

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 1

> 
> cat("Elapsed time =", t[3], "\n")
Elapsed time = 26.8 
> 
> ## Clean up properly then quit()
> 
> mpi.bcast.cmd(mpi.quit(),
+               caller.execute=TRUE)
