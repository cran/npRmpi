
R version 2.11.0 (2010-04-22)
Copyright (C) 2010 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

Loading required package: boot
Loading required package: cubature
Nonparametric Kernel Methods for Mixed Datatypes (version 0.40-3) + Rmpi 0.5-9
master (rank 0, comm 1) of size 2 is running on: jeffrey-racines-macbook-pro 
slave1 (rank 1, comm 1) of size 2 is running on: jeffrey-racines-macbook-pro 
> ## Make sure you have the .Rprofile file from npRmpi/inst/ in your
> ## current directory or home directory. It is necessary.
> 
> ## To run this on systems with OPENMPI installed and working, try
> ## mpirun -np 2 R CMD BATCH npsymtest_npRmpi. Check the time in the
> ## output file foo.Rout (the name of this file with extension .Rout),
> ## then try with, say, 4 processors and compare run time.
> 
> ## Initialize master and slaves.
> 
> mpi.bcast.cmd(np.mpi.initialize(),
+               caller.execute=TRUE)
> 
> ## Turn off progress i/o as this clutters the output file (if you want
> ## to see search progress you can comment out this command)
> 
> mpi.bcast.cmd(options(np.messages=FALSE),
+               caller.execute=TRUE)
> 
> ## Generate some data and broadcast it to all slaves (it will be known
> ## to the master node)
> 
> mpi.bcast.cmd(set.seed(42),
+               caller.execute=TRUE)
> 
> ## A function to create a time series
> 
> ar.series <- function(phi,epsilon) {
+   n <- length(epsilon)
+   series <- numeric(n)
+   series[1] <- epsilon[1]/(1-phi)
+   for(i in 2:n) {
+     series[i] <- phi*series[i-1] + epsilon[i]
+   }
+   return(series)
+ }
> 
> n <- 1000
> 
> ## Stationary persistent symmetric time-series
> 
> yt <- ar.series(0.5,rnorm(n))
> 
> mpi.bcast.Robj2slave(yt)
> 
> ## A simple example of the test for symmetry
> 
> t <- system.time(mpi.bcast.cmd(output <- npsymtest(yt,
+                                                    boot.num=399,
+                                                    boot.method="geom",
+                                                    method="summation"),
+                                                    caller.execute=TRUE))
> 
> output

Consistent Entropy Asymmetry Test
399 Bootstrap Replications

Test Statistic ‘Srho’: 0.0009879414	P Value: 0.54887 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
Fail to reject the null of symmetry at the 10% level

> 
> cat("Elapsed time =", t[3], "\n")
Elapsed time = 27.806 
> 
> ## Clean up properly then quit()
> 
> mpi.bcast.cmd(mpi.quit(),
+               caller.execute=TRUE)
